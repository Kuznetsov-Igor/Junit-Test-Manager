plugins {
    id("java")
    id("org.jetbrains.intellij.platform") version "2.10.1"
    id("org.jetbrains.changelog") version "2.2.0"
    id("org.jetbrains.gradle.plugin.idea-ext") version "1.1.8"
}

group = providers.gradleProperty("pluginGroup").get()
version = providers.gradleProperty("pluginVersion").get()

repositories {
    mavenCentral()

    intellijPlatform {
        defaultRepositories()
    }
}

dependencies {
    implementation("org.eclipse.jgit:org.eclipse.jgit:7.4.0.202509020913-r")
    implementation("com.intellij:forms_rt:7.0.3")
    compileOnly("org.projectlombok:lombok:1.18.38")
    annotationProcessor("org.projectlombok:lombok:1.18.38")

    testImplementation("junit:junit:4.13.2")
    testCompileOnly("org.projectlombok:lombok:1.18.38")
    testAnnotationProcessor("org.projectlombok:lombok:1.18.38")

    intellijPlatform {
        create(providers.gradleProperty("platformType"), providers.gradleProperty("platformVersion"))

        bundledPlugins(providers.gradleProperty("platformBundledPlugins").map {
            it.isEmpty() ? [] : it.split(',').toList()
        })

        plugins(providers.gradleProperty("platformPlugins").map {
            it.isEmpty() ? [] : it.split(',').toList()
        })

        bundledModules(providers.gradleProperty("platformBundledModules").map {
            it.isEmpty() ? [] : it.split(',').toList()
        })
    }
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

sourceSets {
    main {
        resources {
            srcDirs = ["src/main/resources"]
        }
    }
}

intellijPlatform {
    pluginConfiguration {
        name = providers.gradleProperty("pluginName")
        version = providers.gradleProperty("pluginVersion")
        ideaVersion {
            sinceBuild = providers.gradleProperty("pluginSinceBuild")
        }
    }
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

changelog {
    groups.empty()
    repositoryUrl = providers.gradleProperty("pluginRepositoryUrl")
}

