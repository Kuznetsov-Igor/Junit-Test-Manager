package com.my.junit.testmanager.ui;

import com.intellij.openapi.ui.DialogWrapper;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

import javax.swing.*;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.TableRowSorter;
import java.awt.*;
import java.awt.datatransfer.StringSelection;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.util.concurrent.TimeUnit;

import static com.my.junit.testmanager.utils.MessagesBundle.message;

/**
 * Абстрактная форма таблицы с поиском и возможностью копирования выделенных строк.
 *
 * @param <T> Тип модели таблицы.
 */
public abstract class AbstractTableForm<T extends AbstractTableModel> extends DialogWrapper {
    protected JPanel panel;
    protected JTable table;
    private JTextField textFieldSearch;
    private JLabel labelSearch;
    protected T tableModel;
    protected TableRowSorter<T> sorter;

    protected AbstractTableForm(
            @NotNull String title,
            @NotNull String buttonTextOk,
            @NotNull String buttonTextCancel,
            @NotNull T model
    ) {
        super(true);
        this.tableModel = model;
        this.sorter = new TableRowSorter<>(model);

        setTitle(title);
        setOKButtonText(buttonTextOk);
        setCancelButtonText(buttonTextCancel);
        setResizable(true);
        setSize(800, 600);
        init();
        initForm();
    }

    @Override
    @Nullable
    protected JComponent createCenterPanel() {
        this.labelSearch.setText(message("label.search"));
        this.table.setModel(this.tableModel);
        this.table.setRowSorter(this.sorter);
        this.table.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        this.textFieldSearch.setToolTipText(message("text.field.search.tooltip"));
        this.textFieldSearch.getDocument()
                .addDocumentListener(new DelayedSearchListener());
        setupCopyAction();
        initTable();
        return panel;
    }

    /**
     * Инициализация формы.
     */
    protected abstract void initForm();

    /**
     * Инициализация таблицы.
     */
    protected abstract void initTable();

    /**
     * Получение текста для копирования из указанной строки таблицы.
     *
     * @param rowIndex Индекс строки в модели таблицы.
     * @return Текст для копирования.
     */
    @NotNull
    protected abstract String getCopyText(int rowIndex);

    /**
     * Выполнение поиска по заданному запросу.
     *
     * @param query Запрос для поиска.
     */
    protected void performSearch(@NotNull String query) {
        if (query.length() < 3) {
            this.sorter.setRowFilter(null);
            return;
        }
        this.sorter.setRowFilter(getRowFilter(query));
    }

    /**
     * Получение фильтра строк для поиска.
     *
     * @param query Запрос для поиска.
     * @return Фильтр строк.
     */
    @NotNull
    protected <M, I> RowFilter<M, I> getRowFilter(@NotNull String query) {
        return RowFilter.regexFilter("(?i)" + query);
    }

    /**
     * Выполнение копирования выделенных строк таблицы в буфер обмена.
     */
    protected void performCopy() {
        int[] selectedRows = table.getSelectedRows();
        if (selectedRows.length == 0) {
            return;
        }

        final var sb = new StringBuilder();
        for (int i = 0; i < selectedRows.length; i++) {
            int modelRow = sorter.convertRowIndexToModel(selectedRows[i]);
            final var text = getCopyText(modelRow);
            if (!text.isBlank() && !text.isEmpty()) {
                sb.append(text);
                if (i < selectedRows.length - 1) {
                    sb.append("\n");
                }
            }
        }
        final var selection = new StringSelection(sb.toString());
        Toolkit.getDefaultToolkit().getSystemClipboard().setContents(selection, null);
    }

    /**
     * Настройка действия копирования по сочетанию клавиш.
     */
    private void setupCopyAction() {
        final var copyKey = KeyStroke.getKeyStroke(
                KeyEvent.VK_C,
                Toolkit.getDefaultToolkit()
                        .getMenuShortcutKeyMaskEx()
        );
        table.getInputMap(JComponent.WHEN_FOCUSED).put(copyKey, "copy");
        table.getActionMap().put("copy", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                performCopy();
            }
        });
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panel = new JPanel();
        panel.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        final JScrollPane scrollPane1 = new JScrollPane();
        panel.add(scrollPane1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH,
                GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW,
                GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0,
                false));
        table = new JTable();
        scrollPane1.setViewportView(table);
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new BorderLayout(0, 0));
        panel.add(panel1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH,
                GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
                GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0,
                false));
        labelSearch = new JLabel();
        labelSearch.setText("Label");
        panel1.add(labelSearch, BorderLayout.WEST);
        textFieldSearch = new JTextField();
        panel1.add(textFieldSearch, BorderLayout.CENTER);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {return panel;}

    /**
     * Слушатель для задержанного поиска в текстовом поле.
     */
    private class DelayedSearchListener implements DocumentListener {
        private final Timer timer = new Timer((int) TimeUnit.MILLISECONDS.toMillis(300), e -> {
            final var query = textFieldSearch.getText().trim();
            performSearch(query);
        });

        {
            timer.setRepeats(false);
        }

        @Override
        public void insertUpdate(DocumentEvent e) {resetTimer();}

        @Override
        public void removeUpdate(DocumentEvent e) {resetTimer();}

        @Override
        public void changedUpdate(DocumentEvent e) {resetTimer();}

        private void resetTimer() {
            timer.restart();
        }
    }
}
